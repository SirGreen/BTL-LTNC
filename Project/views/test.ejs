<html>
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="initial-scale=1, maximum-scale=1, user-scalable=no"
    />
    <title>ArcGIS Maps SDK for JavaScript Tutorials: Find places</title>
    <style>
      html,
      body,
      #viewDiv {
        padding: 0;
        margin: 0;
        height: 90%;
        width: 90%;
      }
    </style>
    <link
      rel="stylesheet"
      href="https://js.arcgis.com/4.29/esri/themes/light/main.css"
    />
    <script src="https://js.arcgis.com/4.29/"></script>

    <script>
      require([
        "esri/config",
        "esri/Map",
        "esri/views/MapView",
        "esri/rest/locator",
        "esri/core/reactiveUtils",
        "esri/widgets/Search",
        "esri/Graphic",
        "esri/layers/GraphicsLayer",
        "esri/rest/route",
        "esri/rest/support/RouteParameters",
        "esri/rest/support/FeatureSet"
      ], (
        esriConfig, Map, MapView, locator, reactiveUtils, Search,
        Graphic, GraphicsLayer, route, RouteParameters, FeatureSet
      ) => {
        esriConfig.apiKey =
          "AAPK062e7a74a2014006a64fa63cb03059eaR1dlWYZg2svCwpD6QR8TTpGnxbaSfEtpp-UMmus4jB31-Sf_snHx8I6UY_vsuvPt";

        // Point the URL to a valid routing service
        const routeUrl = "https://route-api.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World";

        // The stops and route result will be stored in this layer
        const routeLayer = new GraphicsLayer();

        // Setup the route parameters
        const routeParams = new RouteParameters({
          // An authorization string used to access the routing service
          apiKey: "AAPK062e7a74a2014006a64fa63cb03059eaR1dlWYZg2svCwpD6QR8TTpGnxbaSfEtpp-UMmus4jB31-Sf_snHx8I6UY_vsuvPt"  ,
          stops: new FeatureSet(),
          outSpatialReference: {
            // autocasts as new SpatialReference()
            wkid: 3857
          }
        });

        // Define the symbology used to display the stops
        const stopSymbol = {
          type: "simple-marker", // autocasts as new SimpleMarkerSymbol()
          style: "cross",
          size: 15,
          outline: {
            // autocasts as new SimpleLineSymbol()
            width: 4
          }
        };

        // Define the symbology used to display the route
        const routeSymbol = {
          type: "simple-line", // autocasts as SimpleLineSymbol()
          color: [0, 0, 255, 0.5],
          width: 5
        };

        const map = new Map({
          basemap: "topo-vector",
          layers: [routeLayer],
        });

        const view = new MapView({
          container: "viewDiv",
          map: map,
          center: [106.65791, 10.77221],
          zoom: 16,
        });

        searchBoxStart = new Search({
          view: view,
          //sources: sourceCol
        });
        searchBoxEnd = new Search({
          view: view,
          //sources: sourceCol
        });

        searchBoxStart.on("search-complete", (event) => {
          document.getElementById("showSearchStart").innerHTML = event.searchTerm;
          console.log(event);
          addStop(event.results[0].results[0].feature.geometry)
        });

        searchBoxEnd.on("search-complete", async (event) => {
          document.getElementById("showSearchEnd").innerHTML = event.searchTerm;
          console.log(event);          
          addStop(event.results[0].results[0].feature.geometry)
        });

        view.ui.add(searchBoxStart, "top-right");
        view.ui.add(searchBoxEnd, "top-right");

        function addStop(geo) {
          // Add a point at the location of the map click
          const stop = new Graphic({
            geometry: geo,
            symbol: stopSymbol
          });
          routeLayer.add(stop);
          
          // Execute the route if 2 or more stops are input
          routeParams.stops.features.push(stop);
          if (routeParams.stops.features.length >= 2) {
            route.solve(routeUrl, routeParams).then(showRoute);
          }
        }
        // Adds the solved route to the map as a graphic
        function showRoute(data) {
          const routeResult = data.routeResults[0].route;
          routeResult.symbol = routeSymbol;
          routeLayer.add(routeResult);
          document.getElementById("showTravelTime").innerHTML = data.routeResults[0].route.attributes.Total_TravelTime //in minutes
          document.getElementById("showTravelLength").innerHTML = data.routeResults[0].route.attributes.Total_Kilometers
        }
      });
    </script>
  </head>
  <body>
    <div id="viewDiv"></div>
    <div>
      Showing:
      <div id="showSearchStart">Start Point</div>
      <div id="showSearchEnd">Start End</div>
      <div id="showTravelTime">Travel Time</div>
      <div id="showTravelLength">Path Length</div>
    </div>
  </body>
</html>
